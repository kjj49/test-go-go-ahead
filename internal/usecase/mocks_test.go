// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/interfaces.go -package usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/kjj49/test-go-go-ahead/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCurrency is a mock of Currency interface.
type MockCurrency struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyMockRecorder
}

// MockCurrencyMockRecorder is the mock recorder for MockCurrency.
type MockCurrencyMockRecorder struct {
	mock *MockCurrency
}

// NewMockCurrency creates a new mock instance.
func NewMockCurrency(ctrl *gomock.Controller) *MockCurrency {
	mock := &MockCurrency{ctrl: ctrl}
	mock.recorder = &MockCurrencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrency) EXPECT() *MockCurrencyMockRecorder {
	return m.recorder
}

// GetCurrency mocks base method.
func (m *MockCurrency) GetCurrency(arg0 context.Context, arg1 entity.CurrencyRequest) (entity.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", arg0, arg1)
	ret0, _ := ret[0].(entity.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockCurrencyMockRecorder) GetCurrency(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockCurrency)(nil).GetCurrency), arg0, arg1)
}

// MockCurrencyRepository is a mock of CurrencyRepository interface.
type MockCurrencyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyRepositoryMockRecorder
}

// MockCurrencyRepositoryMockRecorder is the mock recorder for MockCurrencyRepository.
type MockCurrencyRepositoryMockRecorder struct {
	mock *MockCurrencyRepository
}

// NewMockCurrencyRepository creates a new mock instance.
func NewMockCurrencyRepository(ctrl *gomock.Controller) *MockCurrencyRepository {
	mock := &MockCurrencyRepository{ctrl: ctrl}
	mock.recorder = &MockCurrencyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyRepository) EXPECT() *MockCurrencyRepositoryMockRecorder {
	return m.recorder
}

// SaveAllCurrency mocks base method.
func (m *MockCurrencyRepository) SaveAllCurrency(ctx context.Context, allCurrency []entity.Currency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAllCurrency", ctx, allCurrency)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAllCurrency indicates an expected call of SaveAllCurrency.
func (mr *MockCurrencyRepositoryMockRecorder) SaveAllCurrency(ctx, allCurrency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAllCurrency", reflect.TypeOf((*MockCurrencyRepository)(nil).SaveAllCurrency), ctx, allCurrency)
}

// SaveRequest mocks base method.
func (m *MockCurrencyRepository) SaveRequest(arg0 context.Context, arg1 entity.CurrencyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRequest indicates an expected call of SaveRequest.
func (mr *MockCurrencyRepositoryMockRecorder) SaveRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRequest", reflect.TypeOf((*MockCurrencyRepository)(nil).SaveRequest), arg0, arg1)
}

// MockCurrencyWebAPI is a mock of CurrencyWebAPI interface.
type MockCurrencyWebAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyWebAPIMockRecorder
}

// MockCurrencyWebAPIMockRecorder is the mock recorder for MockCurrencyWebAPI.
type MockCurrencyWebAPIMockRecorder struct {
	mock *MockCurrencyWebAPI
}

// NewMockCurrencyWebAPI creates a new mock instance.
func NewMockCurrencyWebAPI(ctrl *gomock.Controller) *MockCurrencyWebAPI {
	mock := &MockCurrencyWebAPI{ctrl: ctrl}
	mock.recorder = &MockCurrencyWebAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyWebAPI) EXPECT() *MockCurrencyWebAPIMockRecorder {
	return m.recorder
}

// GetAllCurrency mocks base method.
func (m *MockCurrencyWebAPI) GetAllCurrency() ([]entity.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCurrency")
	ret0, _ := ret[0].([]entity.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCurrency indicates an expected call of GetAllCurrency.
func (mr *MockCurrencyWebAPIMockRecorder) GetAllCurrency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCurrency", reflect.TypeOf((*MockCurrencyWebAPI)(nil).GetAllCurrency))
}

// GetCurrency mocks base method.
func (m *MockCurrencyWebAPI) GetCurrency(arg0 entity.CurrencyRequest) (entity.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", arg0)
	ret0, _ := ret[0].(entity.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockCurrencyWebAPIMockRecorder) GetCurrency(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockCurrencyWebAPI)(nil).GetCurrency), arg0)
}
